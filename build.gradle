/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Docker dependencies and properties
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "com.bmuschko:gradle-docker-plugin:3.6.2"
  }
}

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
	}
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'checkstyle'
// apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: "com.bmuschko.docker-java-application"
apply plugin: 'org.junit.platform.gradle.plugin'

// You can add additional instructions to the dockerfile using dockerDistTar and Dockerfile task dsl:
//dockerDistTar {
    //instruction {'RUN ls -la'}
    //environmentVariable('JAVA_OPTS', '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap')
//}

sourceSets {
      main {
         java {
            srcDir 'src/main/java'
         }
      }
      test {
         java {
            srcDir 'src/test/java'
         }
      }
}

/*dockerCreateDockerfile {
    	instruction 'COPY credentials.json /'
}*/
   
docker {
    javaApplication {
        baseImage = 'openjdk:8'
        //maintainer = '<name> "<email>"'
        // ports = [9090, 5701]
        tag = 'sna4so:1.0'
    }
}


// Java Application Dependencies & properties
sourceCompatibility = 1.8
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
	// Google Big Query API v?: ?
	compile 'com.google.cloud:google-cloud-bigquery:1.64.0'
	
	// Google Spreadsheet API v4: ? 
	compile 'com.google.api-client:google-api-client:1.23.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
    compile 'com.google.apis:google-api-services-sheets:v4-rev516-1.23.0'
    // Google Drive API v3: https://developers.google.com/api-client-library/java/apis/drive/v3
    compile 'com.google.apis:google-api-services-drive:v3-rev154-1.25.0'

    // For internal usage
    compile 'com.google.guava:guava:21.0'
    
    // Compile all jars in the lib directory of the project
    //compile fileTree(dir:'lib', include: ['*.jar'])
    
    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0")
    testCompile("org.junit.platform:junit-platform-runner:1.0.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0")
  
}

findbugs {
  ignoreFailures = true
  toolVersion = "3.0.1"
  effort = "max"
  //findbugsTest.enabled=false
  sourceSets = [sourceSets.main]
}

/*
pmd {
  ignoreFailures = true
  //pmdTest.enabled=false
  toolVersion = '5.8.1'
  consoleOutput = true
  sourceSets = [sourceSets.main]
  ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            //'java-comments',
            //'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-junit',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
            ]
}
 */
 
checkstyle {
	// Whether to allow the build to continue if there are warnings. Default: ignoreFailures = false
	ignoreFailures = true
	sourceSets = [sourceSets.main]
	// Checkstyle version
	toolVersion "8.8"
}

junitPlatform {
	// platformVersion '1.1.0'
	filters {
		engines {
			include 'junit-jupiter'
			// exclude 'custom-engine'
		}
		tags {
			// include 'fast'
			exclude 'slow'
		}
		// includeClassNamePattern '.*Test'
	}
	// configurationParameter 'junit.jupiter.conditions.deactivate', '*'
	enableStandardTestTask true
	reportsDir file("${buildDir}/test-results/junit-platform") // this is the default
	//logManager 'org.apache.logging.log4j.jul.LogManager'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '4.6.1'
}

jacocoTestReport {
    // Show code coverage results
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    executionData fileTree(project.rootDir.absolutePath).include("**/${buildDir}/jacoco/*.exec")
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)    

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.html")
    }
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
    
    finalizedBy jacocoTestReport
}

// Main class
mainClassName = 'it.uniba.main/AppMain'

